# Перевірка наявності підстроки у строці

string = "Test string. A, B, C, D, E"

puts "Тестова строка: \"#{string}\""

# Перевірка за допомогою <include?>

puts "\n"
puts "Строка містить підстроку \"Test\": " + string.include?("Test").to_s
puts "Строка містить підстроку \"Mode\": " + string.include?("Mode").to_s

# Перевірка за допомогою регулярних виразів (варіант 1)
# Метод <match> повертає об'єкт типу <MatchData>
# Якщо даний об'єкт дорівнює nil - співпадінь не знайдено

puts "\n"
puts "Строка містить підстроку \"A, B, C\": #{!(string.match(/A, B, C/).nil?)}"
puts "Строка містить підстроку \"D, E, F\": #{!(string.match(/D, E, F/).nil?)}"

# Перевірка за допомогою регулярних виразів (варіант 2)
# Оператоор <=~> повертає позицію першого співпадіння підстроки у строці
# Якщо оператор <=~> повертає nil - співпадінь не знайдено
# Результат операртора <=~> аналогічний наступному коду: 

# string.index("B, C, D")

puts "\n"
puts "Строка містить підстроку \"B, C, D\": #{(string =~ /B, C, D/) != nil}"
puts "Строка містить підстроку \"E, F, G\": #{(string =~ /E, F, G/) != nil}"

# Складніші регулярні вирази

# <.> - один будь-який символ
# <*> - співпадіння символу від 0 до ... раз
# <+> - співпадіння символу від 1 до ... раз
# <^c> - строка починається із символу <c>
# <c$> - строка закінчується символом <c>
# <[abc...xyz, 0-9, a-z, A-Z, ...] - набір варіантів символів

word_1 = "кіт"
word_2 = "сіно"
word_3 = "мороз"
word_4 = "дерево"
word_5 = "молоток"

puts "\n"
puts "Слово \"#{word_1}\" підпадає під регулярний вираз \"к.т\": #{(word_1 =~ /к.т/) != nil}"
puts "Слово \"#{word_1}\" підпадає під регулярний вираз \"ко.\": #{(word_1 =~ /ко./) != nil}"

puts "\n"
puts "Слово \"#{word_2}\" підпадає під регулярний вираз \"^сін\": #{(word_2 =~ /^сін/) != nil}"
puts "Слово \"#{word_2}\" підпадає під регулярний вираз \"^іно\": #{(word_2 =~ /^іно/) != nil}"

puts "\n"
puts "Слово \"#{word_3}\" підпадає під регулярний вираз \"роз$\": #{(word_3 =~ /роз$/) != nil}"
puts "Слово \"#{word_3}\" підпадає під регулярний вираз \"мор$\": #{(word_3 =~ /мор$/) != nil}"

puts "\n"
puts "Слово \"#{word_4}\" підпадає під регулярний вираз \"д.*ю*о\": #{(word_4 =~ /д.*ю*о/) != nil}"
puts "Слово \"#{word_4}\" підпадає під регулярний вираз \"д.*ю+о\": #{(word_4 =~ /д.*ю+о/) != nil}"

puts "\n"
puts "Слово \"#{word_5}\" підпадає під регулярний вираз \"^[млтко]*$\": #{(word_5 =~ /^[млтко]*$/) != nil}"
puts "Слово \"#{word_5}\" підпадає під регулярний вираз \"^[млтка]*$\": #{(word_5 =~ /^[млтка]*$/) != nil}"

# Метод <gsub> 

puts "\n"
puts "Заміна знайдених співпадінь: #{word_5} => #{word_5.gsub(/о/, "0")}"